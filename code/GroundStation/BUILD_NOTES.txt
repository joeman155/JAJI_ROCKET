Summary
--------
We detail steps to set-up the Rasberry-Pi 2 Model B the first time


Steps
------
1. Download Raspbian version released on 5-5-2015

2. Put image on to microSD using Win32DiskImager-0.9.5

3. Load it up....in Rasberry-Pi

4. within the Rasberry-Pi config screens...
- Expand File System
- Set password for pi to pi
- Enable SSH
- Set Console Text console
- Enable SPI
- Enable ITC
- installed all en_AU* locales
- installed all en_GB* locales
- installed all en_US* locales
- en_US.UTF-8 is default LOCAL
- Timezone set to Australia -> Brisbane
- Change Keyboard layout to Generic 104-key PC --> Other (English (US))...
  then accepted all other defaults.
  [IF you don't do this...the pipe symbol doesn't work]
- hostname to gspi.fnqitservices.local



When finished...reboot


5. Log in as pi

sudo su -

Run the following commands to load software:-

apt-get update

apt-get install apache2 php5 sqlite3

apt-get install hostapd

apt-get install php5-sqlite

apt-get install postgresql postgresql-contrib

apt-get install chkconfig locate

apt-get install osm2pgsql gdal-bin

apt-get install telnet screen  gcc-4.8

apt-get install libfreetype6-dev libpng12-dev libtiff4-dev libicu-dev libgdal-dev libcairo-dev libcairomm-1.0-dev liblua5.2-dev ttf-unifont lua5.1 liblua5.1-dev 

apt-get install libproj-dev libboost-dev libboost-all-dev

apt-get install imagemagick

apt-get install libdbi-perl libdevice-serialport-perl libdbd-sqlite3 libdbd-sqlite3-perl

NOTE: git was already installec by default!


6. Then configured static IP
by having interfaces have:-

auto eth0
allow-hotplug eth0
iface eth0 inet static
address 192.168.10.140
netmask 255.255.255.0
network 192.168.10.0
broadcast 192.168.10.255
gateway 192.168.10.130



(I then set-up a DNS entry for gspi.fnqitservices.local ---> 192.168.10.140)




7. Apache config
vi /etc/apache2/sites-enabled/000-default

Change

        DocumentRoot /var/www

to

        DocumentRoot /data/web


Save and exit

service apache2 restart

chown pi:pi /data/web



8. Set-up Dev area
mkdir /data/src
chown pi:pi /data/src
chown pi:pi /data

su - pi

cd /data/src

git clone https://github.com/joeman155/JAJI_ROCKET.git

cd /data/src/JAJI_ROCKET/code/GroundStation

git config --global user.email "joeman@leederville.net"
git config --global user.name "Joseph Turner"



vi /home/pi/.bashrc

At end of file paste:-

export EDITOR=vi




9. Mapnik
As user root, set:-

CONF_SWAPSIZE=1000

in file /etc/dphys-swapfile

and then rebooted. 

(This is done because we need a bit more SWAP while compiling)

As user root

/etc/init.d/postgresql stop

/etc/init.d/apache2 stop

(We stop these services to give us more Memory)


As user pi, execute:-

cd /data/src
git clone git://github.com/mapnik/mapnik
cd mapnik
git branch 2.2 origin/2.2.x
git checkout 2.2

python scons/scons.py configure INPUT_PLUGINS=all OPTIMIZATION=3 SYSTEM_FONTS=/usr/share/fonts/truetype/
make
sudo make install
sudo ldconfig




Verify that Mapnik has been installed correctly:
python
>>> import mapnik
>>>
If python replies with the second chevron prompt >>> and without errors, then Mapnik library was found by Python. Congratulations! You can leave Python with this command:
>>> quit()



10. Install Mod_Tile   (This include renderd)

As user root execute:-

apt-get install autogen autoconf libtool gettext libagg-dev
apt-get install apache2-threaded-dev apache2-utils
apt-get install libxft-dev

as user pi

cd /data/src
mkdir deps
cd deps

git clone https://github.com/openstreetmap/mod_tile.git
cd mod_tile
./autogen.sh
./configure
make
sudo make install
sudo make install-mod_tile 


11. Install Carto

...looking at instructions from http://github.com/mapbox/carto/

As user root...

apt-get install npm

npm config set registry http://registry.npmjs.org

npm install -g carto
npm install -g node

ln -s /usr/bin/nodejs  /usr/bin/node



12. Configure Styles
As user pi

[ -d /data/maps/style ] || mkdir style
cd /data/maps/style


wget https://github.com/mapbox/osm-bright/archive/master.zip
wget http://data.openstreetmapdata.com/simplified-land-polygons-complete-3857.zip
wget http://data.openstreetmapdata.com/land-polygons-split-3857.zip
wget http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_populated_places_simple.zip


unzip '*.zip'

mkdir ne_10m_populated_places_simple
mv ne_10m_populated_places_simple.* ne_10m_populated_places_simple/
mv ne_10m_populated_places_simple/ne_10m_populated_places_simple.zip .

mkdir osm-bright-master/shp -p
mv land-polygons-split-3857 osm-bright-master/shp/
mv simplified-land-polygons-complete-3857 osm-bright-master/shp/
mv ne_10m_populated_places_simple osm-bright-master/shp/

cd osm-bright-master/shp/land-polygons-split-3857
shapeindex land_polygons.shp
cd ../simplified-land-polygons-complete-3857/
shapeindex simplified_land_polygons.shp
cd ../

cd /data/maps/style/osm-bright-master
cp osm-bright/osm-bright.osm2pgsql.mml osm-bright/osm-bright.osm2pgsql.mml.backup


Open this file (osm-bright/osm-bright.osm2pgsql.mml) for editing.

Find the lines with URLs pointing to shapefiles (ending .zip) and replace each one with these appropriate pairs of lines:

"file": "/usr/local/share/maps/style/osm-bright-master/shp/land-polygons-split-3857/land_polygons.shp", 
"type": "shape"

"file": "/usr/local/share/maps/style/osm-bright-master/shp/simplified-land-polygons-complete-3857/simplified_land_polygons.shp", 
"type": "shape",

"file": "/usr/local/share/maps/style/osm-bright-master/shp/ne_10m_populated_places_simple/ne_10m_populated_places_simple.shp", 
"type": "shape"

Note that we are also adding “type”: “shape” to each one. (If you’re using nano, to save, now press ctrl-X and Y.)

Finally, in the section dealing with “ne_places”, replace the “srs” and “srs-name” lines with this one line:

"srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"


Save and exit

cp configure.py.sample configure.py

Open configure.py in editor...



Update config line to point to /data/maps/style directory
Update dbname from osm to gis
Set    username from "" to "pi"

Save and exit

./make.py
cd ../OSMBright/
carto project.mml > OSMBright.xml



13. Configure Apache to use mod_tile and RenderD

Back up /etc/apache2/sites-available/default


cp  /etc/apache2/sites-available/default   /etc/apache2/default.bk

Open

/etc/apache2/sites-available/default

And add following JUST before ErrorLog line:-

    ModTileTileDir /var/lib/mod_tile
    LoadTileConfigFile /etc/renderd.conf
    ModTileBulkMode Off
    ModTileRequestTimeout 3
    ModTileMissingRequestTimeout 10
    ModTileMaxLoadOld 16
    ModTileMaxLoadMissing 50
    ModTileVeryOldThreshold 31536000000000
    ModTileRenderdSocketName /var/run/renderd/renderd.sock
    
    ModTileCacheDurationMax 604800
    ModTileCacheDurationDirty 900
    ModTileCacheDurationMinimum 10800
    ModTileCacheDurationMediumZoom 13 86400
    ModTileCacheLastModifiedFactor 0.20
    ModTileEnableTileThrottling Off
    ModTileEnableTileThrottlingXForward 0
    ModTileThrottlingTiles 10000 1
    ModTileThrottlingRenders 128 0.2



Add near top:-

    ServerName  gspi.fnqitservices.local

Save and exit


Create a file called /etc/apache2/mods-available/tile.load
with the following line in it:-


LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so


Save and exit

Then type:-

a2enmod tile


Then open /etc/renderd.conf in editor and add:-

[renderd]
socketname=/var/run/renderd/renderd.sock
num_threads=4
tile_dir=/var/lib/mod_tile
stats_file=/var/run/renderd/renderd.stats

[mapnik]
plugins_dir=/usr/local/lib/mapnik/input
font_dir=/usr/share/fonts/truetype
font_dir_recurse=1

[default]
URI=/osm_tiles/
TILEDIR=/var/lib/mod_tile
XML=/data/maps/style/OSMBright/OSMBright.xml
HOST=gspi.fnqitservices.local
TILESIZE=256



Save and exit


mkdir /var/lib/mod_tile
chown www-data:www-data /var/lib/mod_tile
chmod 777 /var/lib/mod_tile

mkdir /var/run/renderd
chown pi:pi /var/run/renderd


In one screen start renderd as user pi


/usr/local/bin/renderd -f -c /etc/renderd.conf



In another screen as user root, run:-

service apache2 restart



Install the RTC
------------
1. Install battery on to PiFrace RTC module
2. Install module on pins
3. Power up Rasberry-Pi
4. Log on to Rasberry-Pi

5. Log on as user pi and execute following commands:-

cd /data/src
mkdir rtc
cd rtc
wget https://raw.github.com/piface/PiFace-Real-Time-Clock/master/install-piface-real-time-clock.sh


chmod a+x install-piface-real-time-clock.sh
sudo ./install-piface-real-time-clock.sh

Follow the instructions... which will be something like:-

Enabling I2C module.
Changing /etc/rc.local to load time from PiFace Clock.
Please *reboot* and then set your clock with:

    sudo date -s "14 JAN 2014 10:10:30"

(Put in the correct date/time)





APPENDIX A - Loading standard OpenStreetMap Style.
---------------
The above assumed we want to use OSMBright style....which I found to be quite bad.
(The OSMBright Style install is documented in BUILD_NOTES.txt)
Below are steps I used to use the default OpenStreetMap Carto style.

On the Rasberry-Pi machine as the user pi

cd /data/maps/
mkdir style2
cd style2
git clone https://github.com/gravitystorm/openstreetmap-carto.git

cd openstreetmap-carto/

./get-shapefiles.sh

Open project.mml
and put in absolute path to the shp files

carto project.mml > carto.xml


Then put the following line in /etc/renderd.conf

XML=/data/maps/style/OSMBright/carto.xml

Restart Rendered

